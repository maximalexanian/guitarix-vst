/****************************************************************
** helper definitions
*/
bypass(switch, block) = _ <: select2(switch, _, block);
BP(block) = bypass(checkbox("ON"), block);

copysign = ffunction(float copysign(float,float), <math.h>, "");

anti_denormal = pow(10,-20);
no_denormal = pow(10,-15);
//add_dc = +(anti_denormal);
add_dc = +(anti_denormal);
anti_denormal_ac = 1 - 1' : *(anti_denormal) : + ~ *(-1);

smoothi(c) = *(1-c) : +~*(c);

clip(lo,hi) = min(hi) : max(lo);
sym_clip(thr) = clip(-thr,thr);

balance(b) = *(1 - max(0, b)), *(1 - max(0, -b));
wet_dry_mix(w, Fx) = _ <: _, Fx : balance(w) : +;

/****************************************************************
** nonlinear functions
*/

// from thesis of Ragnar Bendiksen (used in swh ladspa valve plugin)

valve = environment {
    ex(x) = (1 - exp(-x));
    nlim = 50; // exp(-nlim)+1 == 1, exp(nlim)/(exp(nlim)+1) == 1

    tr(x) = select2(abs(x) > eps, tr_taylor(x), tr_func(max(-600,x))) with
    {
        eps = pow(10,-4);
        tr_func(x) = select2(x < -nlim, x / ex(x), -x*exp(x));
        tr_taylor(x) = 1 + x/2 + x*x/12;
    };
    df(x) = select2(abs(x) > eps, df_taylor(x), df_func(max(-600,x))) with
    {
        eps = pow(10,-4);
        df_func(x) = select2(x < -nlim, 1/ex(x) - (x * exp(-x)) / (ex(x)*ex(x)), -x*exp(x));
        df_taylor(x) = 0.5 + x/6 - x*x*x/180;
    };
    qd(dist, q, x) = dist * (x - q);
    vt(dist, q, x) = (tr(qd(dist, q, x)) - tr(qd(dist, q, 0))) / dist;
    vt_scaled(dist, q, x) = select2(dist*q > nlim, vt(dist, q, x) / df(qd(dist, q, 0)), vt_lim(dist, q, x)) with
    {
        bigval = pow(10,10);
        f(dist, q, x) = (qd(dist, q, x)/(1 - exp(-qd(dist, q, x)))*exp(dist*q) - dist*q)/(dist*dist*q);
        vt_lim(dist, q, x) = select2(dist*x > nlim, select2(dist*x < -nlim, f(dist, q, x), -1/dist), bigval);
    };
    vts(dist, q, x) = abs(x) : ma.neg : vt_scaled(dist, q) : copysign(_, x);
    vtu(dist, q, g) = vt_scaled(dist, q) : *(g) : ma.neg : vt(dist, q) : ma.neg;
    vtu_(dist, q, g) = vt_scaled(dist, q) :ma.neg :  *(g) : vt_scaled(dist, q) : /(g) : ma.neg;
};

saturate(t, x) = select2(abs(x) < t, x, v)
with {
  sigmoid(x) = x * (1.5 - 0.5 * x * x);
  sat(x) = t + (1 - t)*sigmoid((abs(x)-t)/((1-t)*1.5));
  v = copysign(x, sat(x));
};

nonlin(a,b,c,x) = ((a * x - b * abs(x) * x) - x) * c;
nonlin1 = nonlin(2,1,0.5);

// simple triode circuit emulation

Ftube = ffunction(float Ftube(int,float), "valve.h", "");

TB_12AX7_68k     = fconstant(int TUBE_TABLE_12AX7_68k,     "valve.h");
TB_12AX7_250k    = fconstant(int TUBE_TABLE_12AX7_250k,    "valve.h");
TB_6V6_68k       = fconstant(int TUBE_TABLE_6V6_68k,       "valve.h");
TB_6V6_250k      = fconstant(int TUBE_TABLE_6V6_250k,      "valve.h");
TB_12AU7_68k     = fconstant(int TUBE_TABLE_12AU7_68k,     "valve.h");
TB_12AU7_250k    = fconstant(int TUBE_TABLE_12AU7_250k,    "valve.h");
TB_6DJ8_68k      = fconstant(int TUBE_TABLE_6DJ8_68k,      "valve.h");
TB_6DJ8_250k     = fconstant(int TUBE_TABLE_6DJ8_250k,     "valve.h");
TB_12AT7_68k     = fconstant(int TUBE_TABLE_12AT7_68k,     "valve.h");
TB_12AT7_250k    = fconstant(int TUBE_TABLE_12AT7_250k,    "valve.h");
TB_6C16_68k      = fconstant(int TUBE_TABLE_6C16_68k,      "valve.h");
TB_6C16_250k     = fconstant(int TUBE_TABLE_6C16_250k,     "valve.h");
TB_6L6CG_68k     = fconstant(int TUBE_TABLE_6L6CG_68k,     "valve.h");
TB_6L6CG_250k    = fconstant(int TUBE_TABLE_6L6CG_250k,    "valve.h");
TB_EL34_68k      = fconstant(int TUBE_TABLE_EL34_68k,      "valve.h");
TB_EL34_250k     = fconstant(int TUBE_TABLE_EL34_250k,     "valve.h");
TB_12AY7_68k     = fconstant(int TUBE_TABLE_12AY7_68k,     "valve.h");
TB_12AY7_250k    = fconstant(int TUBE_TABLE_12AY7_250k,    "valve.h");
TB_JJECC83S_68k  = fconstant(int TUBE_TABLE_JJECC83S_68k,  "valve.h");
TB_JJECC83S_250k = fconstant(int TUBE_TABLE_JJECC83S_250k, "valve.h");
TB_JJECC99_68k   = fconstant(int TUBE_TABLE_JJECC83S_68k,  "valve.h");
TB_JJECC99_250k  = fconstant(int TUBE_TABLE_JJECC83S_250k, "valve.h");
TB_EL84_68k      = fconstant(int TUBE_TABLE_EL84_68k,   "valve.h");
TB_EL84_250k     = fconstant(int TUBE_TABLE_EL84_250k,  "valve.h");
TB_EF86_68k      = fconstant(int TUBE_TABLE_EF86_68k,   "valve.h");
TB_EF86_250k     = fconstant(int TUBE_TABLE_EF86_250k,  "valve.h");
TB_SVEL34_68k    = fconstant(int TUBE_TABLE_SVEL34_68k,   "valve.h");
TB_SVEL34_250k   = fconstant(int TUBE_TABLE_SVEL34_250k,  "valve.h");

tubestageF(tb,vplus,divider,fck,Rk,Vk0) = +(no_denormal) : anti_aliase: tube : hpf with {
    lpfk = fi.lowpass(1,fck);
    anti_aliase = fi.lowpass(3,ma.SR/2.1);
    Rp = 100.0e3;
    VkC = Vk0 * (Rp/Rk);
    tube = (+ : -(Vk0) : Ftube(tb) : +(VkC-vplus)) ~ (*(Rk/Rp) :+(no_denormal) : lpfk) : /(divider);
    hpf = fi.highpass(1,31.0);
};

// SHP : This version allows user setting of Vplus and Divider
// Useful as many circuits do not have 100K default here ( marshall preamps, all power tubes etc )
tubestageP(tb,vplus,divider,Rp,fck,Rk,Vk0) = anti_aliase : tube : hpf with {
    lpfk = fi.lowpass(1,fck);
    anti_aliase = fi.lowpass(3,ma.SR/2.1);
    VkC = Vk0 * (Rp/Rk);
    tube = (+ : -(Vk0) : Ftube(tb) : +(VkC-vplus)) ~ (*(Rk/Rp) : lpfk) : /(divider);
    hpf = fi.highpass(1,31.0);
};

tubestage(tb,fck,Rk,Vk0)  = tubestageF(tb,250.0,40.0,fck,Rk,Vk0);
tubestage130_10(tb,fck,Rk,Vk0) = tubestageF(tb,130.0,10.0,fck,Rk,Vk0);
tubestage130_20(tb,fck,Rk,Vk0) = tubestageF(tb,130.0,20.0,fck,Rk,Vk0);

/****************************************************************
 ** Guitar tone stacks
 ** values from CAPS plugin tonestack (based on work from D.T. Yeh
 */
ts = environment {
    k = *(1e3);
    M = *(1e6);
    nF = *(1e-9);
    pF = *(1e-12);

    /* Fender */

    bassman = environment { /* 59 Bassman 5F6-A */
	R1 = 250:k;
        R2 = 1:M;
        R3 = 25:k;
        R4 = 56:k;
        C1 = 250:pF;
        C2 = 20:nF;
        C3 = 20:nF;
        };

    twin = environment { /* 69 Twin Reverb AA270 */
	R1 = 250:k;
        R2 = 250:k;
        R3 = 10:k;
        R4 = 100:k;
        C1 = 120:pF;
        C2 = 100:nF;
        C3 = 47:nF;
        };

    princeton = environment { /* 64 Princeton AA1164 */
	R1 = 250:k;
        R2 = 250:k;
        R3 = 4.8:k;
        R4 = 100:k;
        C1 = 250:pF;
        C2 = 100:nF;
        C3 = 47:nF;
        };

    /* Marshall */

    jcm800 = environment { /* 59/81 JCM-800 Lead 100 2203 */
	R1 = 220:k;
        R2 = 1:M;
        R3 = 22:k;
        R4 = 33:k;
        C1 = 470:pF;
        C2 = 22:nF;
        C3 = 22:nF;
        };
    /* 90 JCM-900 Master 2100: same as JCM-800 */

    jcm2000 = environment { /* 81 2000 Lead */
	R1 = 250:k;
        R2 = 1:M;
        R3 = 25:k;
        R4 = 56:k; /* a 10 k fixed + 100 k pot in series actually */
        C1 = 500:pF;
        C2 = 22:nF;
        C3 = 22:nF;
        };

	/* parameter order is R1 - R4, C1 - C3 */
    mlead = environment { /* 67 Major Lead 200 */
	R1 = 250:k;
        R2 = 1:M;
        R3 = 25:k;
        R4 = 33:k;
        C1 = 500:pF;
        C2 = 22:nF;
        C3 = 22:nF;
        };

    m2199 = environment { /* undated M2199 30W solid state */
        R1 = 250:k;
        R2 = 250:k;
        R3 = 25:k;
        R4 = 56:k;
        C1 = 250:pF;
        C2 = 47:nF;
        C3 = 47:nF;
        };

    /* Vox */
    ac30 = environment { /* 59/86 AC-30 */
        /* R3 is fixed (circuit differs anyway) */
        R1 = 1:M;
        R2 = 1:M;
        R3 = 10:k;
        R4 = 100:k;
        C1 = 50:pF;
        C2 = 22:nF;
        C3 = 22:nF;
        };
};

tonestack(tse) = 1/A0*fi.iir((B0,B1,B2,B3),(A1/A0,A2/A0,A3/A0)) with {
    C1 = tse.C1;
    C2 = tse.C2;
    C3 = tse.C3;
    R1 = tse.R1;
    R2 = tse.R2;
    R3 = tse.R3;
    R4 = tse.R4;

    t = vslider("Treble", 0.5, 0, 1, 0.01);
    m = vslider("Middle", 0.5, 0, 1, 0.01);
    l = vslider("Bass", 0.5, 0, 1, 0.01) : (_-1)*3.4 : exp;

    b1 = t*C1*R1 + m*C3*R3 + l*(C1*R2 + C2*R2) + (C1*R3 + C2*R3);

    b2 = t*(C1*C2*R1*R4 + C1*C3*R1*R4) - m*m*(C1*C3*R3*R3 + C2*C3*R3*R3)
         + m*(C1*C3*R1*R3 + C1*C3*R3*R3 + C2*C3*R3*R3)
         + l*(C1*C2*R1*R2 + C1*C2*R2*R4 + C1*C3*R2*R4)
         + l*m*(C1*C3*R2*R3 + C2*C3*R2*R3)
         + (C1*C2*R1*R3 + C1*C2*R3*R4 + C1*C3*R3*R4);

    b3 = l*m*(C1*C2*C3*R1*R2*R3 + C1*C2*C3*R2*R3*R4)
         - m*m*(C1*C2*C3*R1*R3*R3 + C1*C2*C3*R3*R3*R4)
         + m*(C1*C2*C3*R1*R3*R3 + C1*C2*C3*R3*R3*R4)
         + t*C1*C2*C3*R1*R3*R4 - t*m*C1*C2*C3*R1*R3*R4
         + t*l*C1*C2*C3*R1*R2*R4;

    a0 = 1;

    a1 = (C1*R1 + C1*R3 + C2*R3 + C2*R4 + C3*R4)
         + m*C3*R3 + l*(C1*R2 + C2*R2);

    a2 = m*(C1*C3*R1*R3 - C2*C3*R3*R4 + C1*C3*R3*R3 + C2*C3*R3*R3)
         + l*m*(C1*C3*R2*R3 + C2*C3*R2*R3)
         - m*m*(C1*C3*R3*R3 + C2*C3*R3*R3)
         + l*(C1*C2*R2*R4 + C1*C2*R1*R2 + C1*C3*R2*R4 + C2*C3*R2*R4)
         + (C1*C2*R1*R4 + C1*C3*R1*R4 + C1*C2*R3*R4 + C1*C2*R1*R3 + C1*C3*R3*R4 + C2*C3*R3*R4);

    a3 = l*m*(C1*C2*C3*R1*R2*R3 + C1*C2*C3*R2*R3*R4)
         - m*m*(C1*C2*C3*R1*R3*R3 + C1*C2*C3*R3*R3*R4)
         + m*(C1*C2*C3*R3*R3*R4 + C1*C2*C3*R1*R3*R3 - C1*C2*C3*R1*R3*R4)
         + l*C1*C2*C3*R1*R2*R4
         + C1*C2*C3*R1*R3*R4;

    c = 2*float(ma.SR);

    B0 = -b1*c - b2*pow(c,2) - b3*pow(c,3);
    B1 = -b1*c + b2*pow(c,2) + 3*b3*pow(c,3);
    B2 = b1*c + b2*pow(c,2) - 3*b3*pow(c,3);
    B3 = b1*c - b2*pow(c,2) + b3*pow(c,3);
    A0 = -a0 - a1*c - a2*pow(c,2) - a3*pow(c,3);
    A1 = -3*a0 - a1*c + a2*pow(c,2) + 3*a3*pow(c,3);
    A2 = -3*a0 + a1*c + a2*pow(c,2) - 3*a3*pow(c,3);
    A3 = -a0 + a1*c - a2*pow(c,2) + a3*pow(c,3);
};

/****************************************************************
** filter
*/

//---------------------second order Parametric Equalizer---------
// filter(Q,F,G)
//  			Q : quality factor [1..100]
//				F :	frequency (Hz)
//				G : gain [0..1]
//---------------------------------------------------------------
// from "bandfilter.dsp" in the faust2pd distribution 
// which was released under the BSD license.

eqfilter(Q,F,G)	= fi.TF2(  (1 +  K/Q + K*K) 	/ D,
						 2 * (K*K - 1) 		/ D,
						(1 - K/Q + K*K) 	/ D,
						 2 * (K*K - 1) 		/ D,
						(1 - V*K/Q + K*K) 	/ D
					 )
		with {
				V = ba.db2linear(G);
				K = tan(ma.PI*F/ma.SR);
				D = 1 + V*K/Q + K*K;
		};

ifilter(Q,F,G) = eqfilter(Q,F,-G);

/****************************************************************
** backward compatible faust library definitions, may removed when
** the good versions in wafscript where updated
*/

//----- Flanging effect renamed in faust-0.9.27 from
//----- flangermono -> pf.flanger_mono
//----- flangerstereo -> pf.flanger_stereo

flangermonoN(dmax,curdel,depth,fb,invert)
  = _ <: _, (-:de.fdelay(dmax,curdel)) ~ *(fb) : _, 
  *(select2(invert,depth,0-depth)) 
  : + : *(0.5);

flangerstereoN(dmax,curdel1,curdel2,depth,fb,invert)
  =  flangermonoN(dmax,curdel1,depth,fb,invert),
     flangermonoN(dmax,curdel2,depth,fb,invert);

//----- Moog "Voltage Controlled Filter" (VCF)
//----- filter renamed in faust-0.9.27 from
//----- moogvcf -> ve.moog_vcf

import("stdfaust.lib");

moogvcfN(Q,fr)  = (+ : fi.pole(p) : fi.pole(p) 
                   : fi.pole(p) : fi.pole(p) : *(scale(p))) ~ *(mk)
with {
     p = 1.0 - fr * 2.0 * ma.PI / ma.SR; // approx for fr << ma.SR
     scale(p) = pow(1-p,4);
     mk = 0-Q;
};

/****************************************************************
** building blocks
*/
fuzzy_tube(a,b,c,fuzzy) = _ <: _ + nonlin(a,b,c) * fuzzy * 0.5 : sym_clip(0.7);

/****************************************************************
** parameter definitions for use in alternative module
*/

ampctrl = environment {
    drive = vslider(".gxdistortion.drive[alias]",0.35, 0, 1, 0.01);
    wet_dry = vslider(".gxdistortion.wet_dry[alias]",  100, 0, 100, 1) : /(100) : smoothi(0.999);
    preamp =  vslider(".amp2.stage1.Pregain[alias]",-6,-20,20,0.1) : ba.db2linear : smoothi(0.999);
    gain1 = vslider(".amp2.stage2.gain1[alias]", -6, -20.0, 20.0, 0.1) : ba.db2linear : smoothi(0.999);
};

crybaby_ctrl = environment {
    level = vslider("crybaby.level[alias]", 0.1, 0, 1, 0.01);
    wah = vslider("crybaby.wah[alias]", 0, 0, 1, 0.01);
    wet_dry = vslider("crybaby.wet_dry[name:wet/dry][alias]",  100, 0, 100, 1) : /(100);
};

balance_ctrl = environment {
    bal = vslider(".amp.balance[name:Balance][alias]", 0, -1, 1, 0.1) : smoothi(0.999);
};

wah_ctrl = environment {
    mode = vslider(".wah.mode[enum:manual|auto|alien][alias]", 0, 0, 2, 1);
    wah = vslider(".wah.Wah[alias]", 0, 0, 1, 0.01);
    freq = vslider(".wah.freq[name:Alien Freq][tooltip:LFO in Beats per Minute][alias]",24,24,360,1)/60;
    wet_dry = vslider(".wah.wet_dry[name:dry/wet][alias]",  100, 0, 100, 1) : /(100);
};

vibe_lfo_ctrl = environment {
    freq = vslider(".univibe.freq[name:Tempo][tooltip:LFO frequency (Hz)][alias]", 4.4, 0.1, 10, 0.1) * 16;
    phase = vslider(".univibe.stereo[name:St.df][tooltip:LFO phase shift between left and right channels][alias]", 0.11, -0.5, 0.5, 0.01) * 2 * ma.PI;
};

vibe_mono_lfo_ctrl = environment {
    freq = vslider(".univibe_mono.freq[name:Tempo][tooltip:LFO frequency (Hz)][alias]", 4.4, 0.1, 10, 0.1) * 16;
};

/****************************************************************
** reverb building blocks
*/

opf(a) = (_+_*(1-a)~@(1)*a); 

allpass(dt,fb) = (_,_ <: (*(fb),_:+:@(dt)), -) ~ _ : (!,_);

//allpass(dt,fb) = (+ <:(@(dt):_),*(fb)) ~ *(-fb) : mem,_ : + ;
allpass_with_fdelay(dt1,coef,dt2,dt2pos) = 
	(_,_ <: (*(coef),_:+:@(dt1):de.fdelay(dt2,dt2pos)), -) ~ _ : (!,_);

comb(dt, fb, damp) = (+:@(dt)) ~ (*(1-damp) : (+ ~ *(damp)) : *(fb));
