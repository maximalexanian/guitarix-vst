// Redeye Library so can be conveniently reused
// Tube stage/buffer

redeyeBuffer = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;
    
    Gain = vslider("gain[name:Gain][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
     b0 = -0.00027592369187334*Gain*fs;

    b1 = 0.00027592369187334*Gain*fs;

    a0 = 2.08237299868718e-5*fs + 0.00046096063015504;

    a1 = -2.08237299868718e-5*fs + 0.00046096063015504;
};

chumpouput = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    Gain = vslider("Gain[name:Gain][style:knob]", 0.5, 0.0, 1.0, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
  	 b0 = -0.000275923691873229*Gain*fs;

    b1 = 0.000275923691873229*Gain*fs;

    a0 = 2.08237299868718e-5*fs + 0.000460960630154374;

    a1 = -2.08237299868718e-5*fs + 0.000460960630154374;
};

chumpDriver = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;
    
    Volume = vslider("Volume[name:Volume][style:knob]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
     b0 = -0.00027592369187334*Volume*fs;

    b1 = 0.00027592369187334*Volume*fs;

    a0 = 2.08237299868718e-5*fs + 0.00046096063015504;

    a1 = -2.08237299868718e-5*fs + 0.00046096063015504;
};

chumpPreamp = pre : fi.iir((b0/a0,b1/a0,b2/a0,b3/a0),(a1/a0,a2/a0,a3/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    Gain = hgroup( "Amp", vslider("Gain[0][name:Gain]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s) );
            
    Tone = hgroup( "Amp", vslider("Tone[1][name:Tone]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s));
            
    b0 = 7.37587395491694e-9*Gain*pow(fs,2) + Tone*(-2.86839542691214e-12*Gain*Tone*pow(fs,3) + 6.82678111605089e-12*Gain*pow(fs,3));

    b1 = -7.37587395491694e-9*Gain*pow(fs,2) + Tone*(8.60518628073643e-12*Gain*Tone*pow(fs,3) - 2.04803433481527e-11*Gain*pow(fs,3));

    b2 = -7.37587395491694e-9*Gain*pow(fs,2) + Tone*(-8.60518628073643e-12*Gain*Tone*pow(fs,3) + 2.04803433481527e-11*Gain*pow(fs,3));

    b3 = 7.37587395491694e-9*Gain*pow(fs,2) + Tone*(2.86839542691214e-12*Gain*Tone*pow(fs,3) - 6.82678111605089e-12*Gain*pow(fs,3));

    a0 = Tone*(Tone*fs*(fs*(-8.80319430128334e-15*fs - 9.77412876487773e-13) - 2.15618481704215e-11) + fs*(fs*(1.30755824986672e-14*fs + 1.57726547438855e-12) + 4.21491687148728e-11)) + fs*(fs*(4.16885331779473e-15*fs + 2.51329500908337e-11) + 3.33921266453749e-9) + 1.08009336743453e-7;

    a1 = Tone*(Tone*fs*(fs*(2.640958290385e-14*fs + 9.77412876487773e-13) - 2.15618481704215e-11) + fs*(fs*(-3.92267474960017e-14*fs - 1.57726547438855e-12) + 4.21491687148728e-11)) + fs*(fs*(-1.25065599533842e-14*fs - 2.51329500908337e-11) + 3.33921266453749e-9) + 3.24028010230359e-7;

    a2 = Tone*(Tone*fs*(fs*(-2.640958290385e-14*fs + 9.77412876487773e-13) + 2.15618481704215e-11) + fs*(fs*(3.92267474960017e-14*fs - 1.57726547438855e-12) - 4.21491687148728e-11)) + fs*(fs*(1.25065599533842e-14*fs - 2.51329500908337e-11) - 3.33921266453749e-9) + 3.24028010230359e-7;

    a3 = Tone*(Tone*fs*(fs*(8.80319430128334e-15*fs - 9.77412876487773e-13) + 2.15618481704215e-11) + fs*(fs*(-1.30755824986672e-14*fs + 1.57726547438855e-12) - 4.21491687148728e-11)) + fs*(fs*(-4.16885331779473e-15*fs + 2.51329500908337e-11) - 3.33921266453749e-9) + 1.08009336743453e-7;
};

// Input with 12ax7
input12ax7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Drive = vslider("Drive[name:Drive]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
    b0 = -0.000680089268694692*Drive*fs;

    b1 = 0.000680089268694692*Drive*fs;

    a0 = 2.08240615332986e-5*fs + 0.000445046401665336;

    a1 = -2.08240615332986e-5*fs + 0.000445046401665336;
};

output12ax7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

	 Gain = vslider("Gain[name:Gain]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(1) : si.smooth(s);
            
    b0 = 0.000617188025351883*Gain*fs - 0.000617188025351883*fs;

    b1 = -0.000617188025351883*Gain*fs + 0.000617188025351883*fs;

    a0 = 2.08240830082086e-5*fs + 0.000444015605986603;

    a1 = -2.08240830082086e-5*fs + 0.000444015605986603;
};

// 12AU7
input12au7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

	 Drive = vslider("Drive[name:Drive]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
    b0 = -0.000275923691873229*Drive*fs;

    b1 = 0.000275923691873229*Drive*fs;

    a0 = 2.08237299868718e-5*fs + 0.000460960630154374;

    a1 = -2.08237299868718e-5*fs + 0.000460960630154374;
};
output12au7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Gain = vslider("Gain[name:Gain]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(1) : si.smooth(s);
            
    b0 = 0.000257077328090757*Gain*fs - 0.000257077328090757*fs;

    b1 = -0.000257077328090757*Gain*fs + 0.000257077328090757*fs;

    a0 = 2.08237464507809e-5*fs + 0.000460170362516827;

    a1 = -2.08237464507809e-5*fs + 0.000460170362516827;
};

// 12AY7
input12ay7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Drive = vslider("Drive[name:Drive]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
    b0 = -0.000482670092603301*Drive*fs;

    b1 = 0.000482670092603301*Drive*fs;

    a0 = 2.08238952562458e-5*fs + 0.000453027700200682;

    a1 = -2.08238952562458e-5*fs + 0.000453027700200682;
};
output12ay7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Gain = vslider("Gain[name:Gain]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(1) : si.smooth(s);
            
    b0 = 0.000446694484722411*Gain*fs - 0.000446694484722411*fs;

    b1 = -0.000446694484722411*Gain*fs + 0.000446694484722411*fs;

    a0 = 2.08239241504708e-5*fs + 0.000451640777399954;

    a1 = -2.08239241504708e-5*fs + 0.000451640777399954;
};

// 12AT7
input12at7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Drive = vslider("Drive[name:Drive]", 0.5, 0, 1, 0.01) : Inverted(0) : LogPot(1) : si.smooth(s);
            
    b0 = -0.000564641478707507*Drive*fs;

    b1 = 0.000564641478707507*Drive*fs;

    a0 = 2.08239024527461e-5*fs + 0.00045268226818868;

    a1 = -2.08239024527461e-5*fs + 0.00045268226818868;
};
output12at7 = pre : fi.iir((b0/a0,b1/a0),(a1/a0)) with {
    LogPot(a, x) = ba.if(a, (exp(a * x) - 1) / (exp(a) - 1), x);
    Inverted(b, x) = ba.if(b, 1 - x, x);
    s = 0.993;
    fs = float(ma.SR);
    pre = _;

    
                Gain = vslider("Gain[name:Gain]", 0.5, 0, 1, 0.01) : Inverted(1) : LogPot(1) : si.smooth(s);
            
    b0 = 0.000617188025351883*Gain*fs - 0.000617188025351883*fs;

    b1 = -0.000617188025351883*Gain*fs + 0.000617188025351883*fs;

    a0 = 2.08240830082086e-5*fs + 0.000444015605986603;

    a1 = -2.08240830082086e-5*fs + 0.000444015605986603;
};
